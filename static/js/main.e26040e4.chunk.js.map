{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/ContryPicker.jsx","App.js","serviceWorker.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/ContryPicker.module.css","images/corona.jpg"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","start","end","value","duration","separator","Date","toDateString","variant","url","fetchData","country","a","urlUpdated","axios","get","modifierData","fetchDailyData","map","dailyData","total","date","reportDate","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","BarChat","options","legend","display","title","text","CountryPicker","changeCountry","fetchCountriess","setFetchCountriess","fetchCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchDatas","setState","this","src","imageCovid","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,4OC4CpJC,EAvCH,SAAC,GAAkD,IAAD,IAAhDC,KAAMC,EAA0C,EAA1CA,UAAUC,EAAgC,EAAhCA,UAAUC,EAAsB,EAAtBA,OAAOC,EAAe,EAAfA,WAC3C,OAAIH,GAGJI,QAAQC,IAAIL,GAEZ,yBAAKM,UAAWC,IAAOC,WAC3B,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAIC,QAAQ,UACrC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAKX,IAAOY,WACxE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YACA,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKzB,EAAU0B,MAAOC,SAAU,EAAGC,UAAU,MACzD,kBAACP,EAAA,EAAD,CAAYC,MAAM,iBAAlB,IAAoC,IAAIO,KAAK1B,GAAY2B,eAAzD,KACX,kBAACT,EAAA,EAAD,CAAYU,QAAQ,SAApB,2CAIJ,kBAACtB,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAKX,IAAON,YACxE,kBAACmB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aACA,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKxB,EAAUyB,MAAOC,SAAU,EAAGC,UAAU,MACzD,kBAACP,EAAA,EAAD,CAAYC,MAAM,iBAAlB,IAAoC,IAAIO,KAAK1B,GAAY2B,eAAzD,KACX,kBAACT,EAAA,EAAD,CAAYU,QAAQ,SAApB,8CAIJ,kBAACtB,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAKX,IAAOL,SACxE,kBAACkB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UACA,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKvB,EAAOwB,MAAOC,SAAU,EAAGC,UAAU,MACtD,kBAACP,EAAA,EAAD,CAAYC,MAAM,iBAAlB,IAAoC,IAAIO,KAAK1B,GAAY2B,eAAzD,KACX,kBAACT,EAAA,EAAD,CAAYU,QAAQ,SAApB,8CA7BW,c,yBCPTC,EAAI,iCACIC,EAAS,uCAAC,WAAOC,GAAP,6BAAAC,EAAA,6DACfC,EAAWJ,EACZE,IACCE,EAAW,GAAD,OAAIJ,EAAJ,sBAAqBE,IAHhB,kBAM4CG,IAAMC,IAAIF,GANtD,2BAMTrC,KAAMC,EANG,EAMHA,UAAUC,EANP,EAMOA,UAAUC,EANjB,EAMiBA,OAAOC,EANxB,EAMwBA,WAClCoC,EAAc,CAChBvC,YACAC,YACAC,SACAC,cAXY,kBAcToC,GAdS,4FAAD,sDAqBVC,EAAc,uCAAC,gCAAAL,EAAA,+EAGLE,IAAMC,IAAN,UAAaN,EAAb,WAHK,uBAGjBjC,EAHiB,EAGjBA,KACDwC,EAAaxC,EAAK0C,KAAI,SAACC,GAAD,MAAc,CACtC1C,UAAW0C,EAAU1C,UAAU2C,MAC/BzC,OAAOwC,EAAUxC,OAAOyC,MACxBC,KAAKF,EAAUG,eAPK,kBASjBN,GATiB,gCAYpBnC,QAAQC,IAAR,MAZoB,yDAAD,qDAkBZyC,EAAS,uCAAE,8BAAAX,EAAA,+EAEaE,IAAMC,IAAN,UAAaN,EAAb,eAFb,uBAELc,EAFK,EAEX/C,KAAM+C,UAFK,kBAGXA,EAAUL,KAAI,SAACP,GAAD,OAAYA,EAAQa,SAHvB,gCAOlB3C,QAAQC,IAAR,MAPkB,yDAAF,qD,yBC0BT2C,EA9DH,SAAC,GAA+C,IAAD,IAA7CjD,KAAMC,EAAuC,EAAvCA,UAAUC,EAA6B,EAA7BA,UAAUC,EAAmB,EAAnBA,OAAQgC,EAAW,EAAXA,QAAW,EACxBe,mBAAS,IADe,mBAChDP,EADgD,KACtCQ,EADsC,KAEvDC,qBAAU,YACQ,uCAAC,sBAAAhB,EAAA,kEACZe,EADY,SACQV,IADR,6EAAD,qDAGdY,KACF,IACFhD,QAAQC,IAAI,SAASqC,GAErB,IAAMW,EACFX,EAAUY,OAAU,kBAAC,IAAD,CAAMvD,KAAM,CAC5BwD,OAAOb,EAAUD,KAAI,qBAAEG,QACvBY,SAAS,CAAC,CACNzD,KAAK2C,EAAUD,KAAI,qBAAEzC,aACrByD,MAAM,WACNC,YAAY,OACZC,MAAK,GAEP,CACE5D,KAAK2C,EAAUD,KAAI,qBAAEvC,UACrBuD,MAAM,SACNC,YAAY,MACZE,gBAAiB,oBACjBD,MAAK,OAIT,KAGFE,EACF7D,EACI,kBAAC,IAAD,CACAD,KAAM,CACFwD,OAAO,CAAC,WAAW,YAAY,UAC/BC,SAAS,CAAC,CACNC,MAAM,SACNG,gBAAgB,CACZ,uBACC,uBACD,wBAEJ7D,KAAK,CAACC,EAAU0B,MAAMzB,EAAUyB,MAAMxB,EAAOwB,UAIrDoC,QAAS,CACLC,OAAO,CAACC,SAAQ,GAChBC,MAAM,CAACD,SAAQ,EAAKE,KAAK,oBAAD,OAAqBhC,OAInD,KAGV,OACI,yBAAK5B,UAAWC,IAAOC,WAC1B0B,EAAQ2B,EAAQR,I,mCCrCFc,EAlBK,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cAAiB,EACQnB,mBAAS,IADjB,mBAC5BoB,EAD4B,KACZC,EADY,KAUvC,OARInB,qBAAU,YACc,uCAAC,sBAAAhB,EAAA,kEACjBmC,EADiB,SACSxB,IADT,6EAAD,qDAGpByB,KACF,IAIN,kBAACC,EAAA,EAAD,CAAalE,UAAWC,IAAOkE,aAC3B,kBAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAKT,EAAcS,EAAEC,OAAOpD,SACjE,4BAAQA,MAAM,IAAd,YACF2C,EAAgB5B,KAAK,SAACP,EAAQ6C,GAAT,OAAe,4BAAQC,IAAKD,EAAGrD,MAAOQ,GAAvB,IAAkCA,S,iBCgB5D+C,E,4MA9BdC,MAAM,CACJnF,KAAK,GACLmC,QAAQ,I,EAMVkC,c,uCAAe,WAAOlC,GAAP,eAAAC,EAAA,sEACWF,EAAUC,GADrB,OACPiD,EADO,OAGb,EAAKC,SAAS,CAACrF,KAAKoF,EAAWjD,QAAQA,IAH1B,2C,wPAHUD,I,OAAlBkD,E,OACLE,KAAKD,SAAS,CAACrF,KAAKoF,I,qIASb,IAAD,EACgBE,KAAKH,MAApBnF,EADD,EACCA,KAAKmC,EADN,EACMA,QAEZ,OACE,yBAAK5B,UAAU,aACpB,yBAAKA,UAAU,eAAegF,IAAKC,IAAYC,IAAI,UACpD,kBAAC,EAAD,CAAOzF,KAAMA,IACb,kBAAC,EAAD,CAAeqE,cAAgBiB,KAAKjB,gBAEpC,kBAAC,EAAD,CAAOrE,KAAMA,EAAMmC,QAASA,S,GAzBVuD,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvG,QAAQuG,MAAMA,EAAMC,a,wCExI5BhH,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,oC,mBCDhCD,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.e26040e4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2Divj\",\"card\":\"Cards_card__1kTuD\",\"infected\":\"Cards_infected__26QMh\",\"recovered\":\"Cards_recovered__2Sn8v\",\"deaths\":\"Cards_deaths__3eglu\"};","import React from 'react';\r\nimport {Card,CardContent,Typography,Grid}  from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n  \r\nimport styles from './Cards.module.css';\r\nconst Cards=({data:{confirmed,recovered,deaths,lastUpdate}})=>{\r\n    if(!confirmed){\r\n        return 'loading...';\r\n    }\r\n    console.log(confirmed);\r\nreturn (\r\n    <div className={styles.container}>\r\n<Grid container spacing={3}  justify=\"center\">\r\n<Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n    <CardContent> \r\n        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n        <CountUp start={0} end={confirmed.value} duration={2} separator=\" \"/> \r\n               <Typography color=\"textSecondary\"> {new Date(lastUpdate).toDateString()} </Typography>\r\n    <Typography variant=\"body2\"> Number of active cases of COVID-19  </Typography>\r\n    </CardContent>\r\n\r\n</Grid>\r\n<Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n    <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n        <CountUp start={0} end={recovered.value} duration={2} separator=\" \"/> \r\n               <Typography color=\"textSecondary\"> {new Date(lastUpdate).toDateString()} </Typography>\r\n    <Typography variant=\"body2\"> Number of Recovered cases of COVID-19  </Typography>\r\n    </CardContent>\r\n\r\n</Grid>\r\n<Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n    <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n        <CountUp start={0} end={deaths.value} duration={2} separator=\" \"/> \r\n               <Typography color=\"textSecondary\"> {new Date(lastUpdate).toDateString()} </Typography>\r\n    <Typography variant=\"body2\"> Number of deaths cases of COVID-19  </Typography>\r\n    </CardContent>\r\n\r\n</Grid>\r\n</Grid>\r\n    </div>\r\n)\r\n}\r\nexport default Cards;","import axios from 'axios';\r\nconst url=\"https://covid19.mathdro.id/api\";\r\n export const fetchData=async (country)=>{\r\n     let urlUpdated=url;\r\n     if(country){\r\n         urlUpdated=`${url}/countries/${country}`\r\n     }\r\n    try{\r\n        const {data:{confirmed,recovered,deaths,lastUpdate}} =await axios.get(urlUpdated);\r\n        const modifierData= {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate\r\n        }\r\n\r\n        return modifierData;\r\n\r\n    }\r\n    catch(error  ){\r\n    }\r\n\r\n}\r\nexport const fetchDailyData=async ()=>{\r\n    try{\r\n         \r\n    const {data}=await axios.get(`${url}/daily`); \r\n    const modifierData=data.map((dailyData)=>({\r\n        confirmed: dailyData.confirmed.total,\r\n        deaths:dailyData.deaths.total,\r\n        date:dailyData.reportDate,\r\n    }))\r\n    return modifierData;\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n\r\n    }\r\n\r\n} \r\n\r\nexport  const  countries =async ()=>{\r\n    try{\r\n        const {data:{countries}}=await axios.get(`${url}/countries`);\r\n        return countries.map((country)=> country.name);\r\n\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n}","import React, { useState,useEffect} from 'react'\r\nimport { fetchDailyData} from '../../api';\r\nimport {Line,Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css'\r\n\r\nconst Chart=({data:{confirmed,recovered,deaths},country})=>{\r\n    const [dailyData,setDailyData]=useState([]); \r\n    useEffect(()=>{\r\n        const fetchAPI=async ()=>{\r\n           setDailyData(await  fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    },[]);\r\n    console.log(\"dddddd\",dailyData);\r\n\r\n    const lineChart=(\r\n        dailyData.length? ( <Line data={{\r\n            labels:dailyData.map(({date})=> date),\r\n            datasets:[{\r\n                data:dailyData.map(({confirmed})=> confirmed),\r\n                label:'infected',\r\n                borderColor:'blue',\r\n                fill:true,\r\n\r\n            },{ \r\n                data:dailyData.map(({deaths})=> deaths),\r\n                label:'deaths',\r\n                borderColor:'red',\r\n                backgroundColor: 'rgba(255,0,0,0.5)',\r\n                fill:true,\r\n\r\n            }],\r\n        }}\r\n        />):null\r\n\r\n    );\r\n    const BarChat=(\r\n        confirmed? (\r\n            <Bar \r\n            data={{\r\n                labels:['Infected','Recovered','Deaths'],\r\n                datasets:[{\r\n                    label:'People',\r\n                    backgroundColor:[\r\n                        'rgba(0, 0, 255, 0.5)'\r\n                        ,'rgba(0, 255, 0, 0.5)',\r\n                        'rgba(255, 0, 0, 0.5)',\r\n                    ],\r\n                    data:[confirmed.value,recovered.value,deaths.value]\r\n                }]\r\n\r\n            }}\r\n            options={{\r\n                legend:{display:false},\r\n                title:{display:true,text:`current state of ${country}`}\r\n            }}\r\n            />\r\n\r\n        ):null\r\n\r\n    );\r\nreturn (\r\n    <div className={styles.container}>\r\n{country?BarChat:lineChart}\r\n</div>\r\n)\r\n}\r\nexport default Chart;","import React ,{ useState,useEffect} from 'react'\r\nimport {NativeSelect,FormControl} from '@material-ui/core'\r\nimport { countries} from '../../api';\r\n\r\nimport styles from './ContryPicker.module.css'\r\n\r\n\r\n\r\nconst CountryPicker=({changeCountry})=>{\r\n    const [fetchCountriess,setFetchCountriess]=useState([]); \r\n    useEffect(()=>{\r\n        const fetchCountries=async ()=>{\r\n            setFetchCountriess(await  countries());\r\n        }\r\n        fetchCountries();\r\n    },[]);\r\n\r\n\r\nreturn (\r\n<FormControl className={styles.formControl}>\r\n    <NativeSelect defaultValue='' onChange={(e)=>{changeCountry(e.target.value)}}>\r\n        <option value=\"\"> Gloabal</option>\r\n     {fetchCountriess.map( (country,i) => <option key={i} value={country}> {country}</option>)}\r\n    </NativeSelect>\r\n</FormControl>)\r\n}\r\nexport default CountryPicker;","import React from 'react';\nimport './App.css';\nimport {Cards,Chart,CountryPicker} from './components';\nimport {fetchData} from './api';\nimport styles from './App.css';\nimport imageCovid from './images/corona.jpg'; \n\nclass App extends React.Component{\n  state={\n    data:{},\n    country:''\n  }\n async componentDidMount (){\n   const fetchDatas =await fetchData();\n    this.setState({data:fetchDatas});\n  }\n  changeCountry =async (country)=>{\n    const fetchDatas =await fetchData(country);\n\n    this.setState({data:fetchDatas,country:country});\n\n  }\n\n  render(){\n    const {data,country} =this.state;\n    //console.log(\"okay\")\n    return(\n      <div className=\"container\">\n <img className=\"imgContainer\" src={imageCovid} alt=\"covid\" />\n<Cards data={data}/>\n<CountryPicker changeCountry ={this.changeCountry}/>\n\n<Chart data={data} country={country} />\n\n      </div>\n    )\n  }\n}\nexport  default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render (<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3LvlT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"ContryPicker_formControl__3YHLo\"};","module.exports = __webpack_public_path__ + \"static/media/corona.52a96b53.jpg\";"],"sourceRoot":""}